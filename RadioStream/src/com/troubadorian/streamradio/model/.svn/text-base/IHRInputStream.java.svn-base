package com.clearchannel.iheartradio.model;

import java.io.IOException;
import java.io.InputStream;

import com.clearchannel.iheartradio.android.model.IHRVector;

public class IHRInputStream extends InputStream {
	protected int						mBytesAvailable;
	protected byte[]					mCurrentBuffer;
	protected int						mCurrentBufferOffset;
	protected IHRVector					mData = new IHRVector();

	public synchronized void append( byte[] inBuffer ) {
		if ( inBuffer == null || inBuffer.length <= 0 ) return;

		mBytesAvailable += inBuffer.length;
		mData.addElement( inBuffer );
	}

	public synchronized int available() throws IOException {
		return mBytesAvailable;
	}

	public void close() throws IOException {
		flush();
	}

	public synchronized void flush() {
		mBytesAvailable = 0;
		mCurrentBuffer = null;
		mCurrentBufferOffset = 0;
		mData.removeAllElements();
	}

	public int read() throws IOException {
		byte[]                  buffer = new byte[ 1 ];

		if ( read( buffer, 0, 1 ) < 1 ) return -1;

		return (int) buffer[ 0 ];
	}

	public int read( byte[] buffer ) throws IOException {
		return read( buffer, 0, buffer.length );
	}

	public synchronized int read( byte[] buffer, int bufferOffset, int length ) throws IOException {
		int                     n, offset = 0;
		
		if ( buffer == null ) throw new NullPointerException();
		if ( bufferOffset < 0 || length < 0 || bufferOffset + length > buffer.length ) throw new IndexOutOfBoundsException();
		if ( length == 0 ) return 0;

		do {
			if ( mCurrentBuffer == null ) n = getNextBuffer();
			else if ( ( n = ( mCurrentBuffer.length - mCurrentBufferOffset ) ) == 0 ) n = getNextBuffer();

			// a zero-length buffer cannot be appended, so we either have a valid buffer here or we're out of data.
			if ( n == -1 ) break;
			if ( length < n ) n = length;

			System.arraycopy( mCurrentBuffer, mCurrentBufferOffset, buffer, bufferOffset + offset, n );

			mBytesAvailable -= n;
			mCurrentBufferOffset += n;

			length -= n;
			offset += n;
		} while ( length > 0 );

		return offset == 0 ? -1 : offset;
	}

	protected synchronized int getNextBuffer() {
		mCurrentBufferOffset = 0;

		if ( mData.size() > 0 ) {
			mCurrentBuffer = (byte[]) mData.elementAt( 0 );
			mData.removeElementAt( 0 );
			
			return mCurrentBuffer.length;
		}
		
		mCurrentBuffer = null;

		return -1;
	}
}
