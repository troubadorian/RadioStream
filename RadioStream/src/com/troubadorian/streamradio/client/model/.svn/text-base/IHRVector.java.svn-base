package com.clearchannel.iheartradio.android.model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Random;

import android.os.Bundle;

public class IHRVector extends ArrayList<Object> {
	protected static final long 		serialVersionUID = 1;
	
	public IHRVector() {}
	public IHRVector( int inCapacity ) { super( inCapacity ); }
	@SuppressWarnings( "unchecked" )
	public IHRVector( Collection inCollection ) { super( inCollection ); }
	public IHRVector( Object[] inArray ) { super( Arrays.asList( inArray ) ); }
	
	ArrayList<Object> toArrayList() { return new ArrayList<Object>( this ); }
	
	public boolean truncate( int inSize ) {
		boolean					result = false;
		int						size = size();
		
		if ( size > inSize ) {
			removeRange( inSize , size );
			trimToSize();
			result = true;
		}
		
		return result;
	}
	
	public IHRVector cloneFiltered( IHRHashtable inFilter ) {
		IHRVector				result = null;
		
		if ( null != inFilter ) {
			int					i , n = this.size();
			
			result = new IHRVector();
			
			for ( i = 0 ; i < n ; ++i ) {
				if ( null != inFilter.get( this.get( i ) ) ) {
					result.add( this.get( i ) );
				}
			}
		}
		
		return result;
	}
	
	public String join( String inSeparator ) {
		StringBuilder			result = new StringBuilder();
//		String					result = "";
		int						index , count = size();
		
		for ( index = 0 ; index < count ; ++index ) {
			if ( index > 0 ) result.append( inSeparator );
			result.append( get( index ).toString() );
			
//			if ( index > 0 ) result += inSeparator;
//			result += get( index ).toString();
		}
		
		return result.toString();
//		return result;
	}
	
	public void copyFrom( List inSource , int inStart , int inCount ) {
		int						i , c = ( null == inSource ) ? 0 : inSource.size();
		
		if ( inStart < 0 ) inStart += c;
		if ( inStart > c ) inStart = c;
		c -= inStart;
		
		if ( inCount < 0 ) inCount += c;
		if ( inCount > c ) inCount = c;
		
		for ( i = 0 ; i < inCount ; ++i ) {
			set( i , inSource.get( i + inStart ) );
		}
	}
	
	public void copyFrom( Object[] inSource , int inStart , int inCount ) {
		int						i , c = ( null == inSource ) ? 0 : inSource.length;
		
		if ( inStart < 0 ) inStart += c;
		if ( inStart > c ) inStart = c;
		c -= inStart;
		
		if ( inCount < 0 ) inCount += c;
		if ( inCount > c ) inCount = c;
		
		for ( i = 0 ; i < inCount ; ++i ) {
			set( i , inSource[i + inStart] );
		}
	}
	
	public void swapElementsAt( int i , int j ) {
		Object t = get( i );
		set( i , get( j ) );
		set( j , t );
	}
	
	//	map names from Vector to ArrayList
	public void removeAllElements() { clear(); }
	public Object lastElement() { return size() > 0 ? get( size() - 1 ) : null; }
	public Object elementAt( int i ) { return get( i ); }
	public Object removeElementAt( int i ) { return remove( i ); }
	public boolean removeElement( Object o ) { return remove( o ); }
	public boolean addElement( Object o ) { return add( o ); }
	public void insertElementAt( Object o , int i ) { add( i , o ); }
	
	//	wrap Collections static methods
	public void sort( Comparator inComparator ) { Collections.sort( this , inComparator ); }
	public int search( Object inValue , Comparator inComparator ) { return Collections.binarySearch( this , inValue , inComparator ); }
	public void shuffle( Random inRandom ) { Collections.shuffle( this , inRandom ); }
	public void shuffle() { Collections.shuffle( this ); }
	public void reverse() { Collections.reverse( this ); }
	public boolean disjoint( List that ) { return Collections.disjoint( this , that ); }
	public int frequency( Object inValue ) { return Collections.frequency( this , inValue ); }
	
	public Bundle bundle( Bundle in ) {
		return IHRHashtable.makeBundle( this , in );
	}
	
}
